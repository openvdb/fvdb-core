# Copyright Contributors to the OpenVDB Project
# SPDX-License-Identifier: Apache-2.0
#

# To be populated by get_fused_ssim.cmake

# This file is generated at CMake configure time by get_fused_ssim.cmake
# It contains source code from the fused-ssim library. https://github.com/rahul-goel/fused-ssim
# The fused-ssim library is licensed under the MIT License. Original license text follows.
# MIT License

# Copyright (c) 2024 Rahul Goel

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


@FUSED_SSIM_INIT_PY_CONTENT@

from typing import Literal

def ssim(img1: torch.Tensor,
         img2: torch.Tensor,
         padding: Literal["same", "valid"] = "same",
         train: bool = True
) -> torch.Tensor:
    """
    Compute the Structural Similarity Index (SSIM) between two images.

    Args:
        img1 (torch.Tensor): A batch of images of shape (B, C, H, W)
        img2 (torch.Tensor): A batch of images of shape (B, C, H, W)
        padding (str): The padding to use for the images (). Default is "same".
        train (bool): Whether or not to compute the gradient of the SSIM. Default is True.

    Returns:
        torch.Tensor: The SSIM between the two images.
    """
    return fused_ssim(img1, img2, padding, train)
